{"version":3,"sources":["material-color-utilities/typescript/utils/math_utils.ts","material-color-utilities/typescript/utils/color_utils.ts","material-color-utilities/typescript/hct/viewing_conditions.ts","material-color-utilities/typescript/hct/cam16.ts","material-color-utilities/typescript/hct/hct.ts","material-color-utilities/typescript/palettes/tonal_palette.ts","material-color-utilities/typescript/palettes/core_palette.ts","generate.ts","Swatch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["signum","input","clamp","min","max","Math","lerp","start","stop","amount","sanitizeDegrees","degrees","WHITE_POINT_D65","lstarFromInt","argb","green","blue","y","linearized","pow","intFromXyzComponents","x","z","rgb","gL","bL","r","delinearized","g","b","rInt","round","math","gInt","bInt","intFromXyz","xyz","intFromLstar","lstar","fy","kappa","cubeExceedEpsilon","yFromLstar","ViewingConditions","n","aw","nbb","ncb","c","nc","rgbD","fl","fLRoot","whitePoint","utils","adaptingLuminance","PI","backgroundLstar","surround","discountingIlluminant","rW","gW","bW","f","d","exp","k","k4","k4F","cbrt","sqrt","rgbAFactors","rgbA","DEFAULT","make","CAM16","hue","chroma","j","q","m","s","jstar","astar","bstar","other","dJ","this","dA","dB","dEPrime","viewed","viewingConditions","alpha","t","hRad","eHue","cos","ac","p1","p2","hSin","sin","hCos","gamma","a","rA","gA","bA","rCBase","abs","rC","gCBase","gC","bCBase","bC","rF","gF","bF","fromIntInViewingConditions","redL","greenL","blueL","rD","gD","bD","rAF","gAF","bAF","u","atanDegrees","atan2","hueRadians","huePrime","mstar","log","h","fromJchInViewingConditions","fromUcsInViewingConditions","HCT","internalHue","internalChroma","internalTone","setInternalState","toInt","getInt","newHue","newChroma","newTone","cam","fromInt","tone","high","mid","low","isFirstLoop","answer","possibleAnswer","findCamByJ","getIntInViewingConditions","bestdL","bestdE","bestCam","clipped","fromJch","viewedInSrgb","clippedLstar","dL","camClipped","dE","distance","TonalPalette","cache","Map","get","undefined","from","set","hct","fromHueAndChroma","CorePalette","a1","a2","a3","n1","n2","error","TONES","Swatch","render","component","hex","display","children","contrastColor","toString","substr","toFixed","lch","colord","toLch","l","createElement","style","backgroundColor","color","className","App","useState","setColor","colorAsNum","parseInt","replace","colorAsHct","generated","keyColor","corePalette","of","paletteValues","palette","map","name","generateCorePalette","console","setDisplay","handleDisplayChange","e","target","id","onSubmit","preventDefault","document","getElementById","value","htmlFor","type","defaultValue","checked","onChange","Array","length","fill","_","i","scope","extend","lchPlugin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.21efc9c9.chunk.js","sourcesContent":["/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @return input < 0? -1. input = 0? 0. input > 0? 1.\n */\nexport function signum(input: number): number {\n  if (input < 0) {\n    return -1;\n  } else if (input === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * Ensure min <= input <= max\n */\nexport function clamp(min: number, max: number, input: number) {\n  return Math.min(Math.max(input, min), max);\n}\n\n/**\n * Linearly interpolate from start to stop, by amount (0.0 <= amount <= 1.0)\n */\nexport function lerp(start: number, stop: number, amount: number) {\n  return (1.0 - amount) * start + amount * stop;\n}\n\n/**\n * Determine the shortest angle between two angles, measured in degrees.\n */\nexport function differenceDegrees(a: number, b: number): number {\n  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n\n/**\n * Ensure 0 <= degrees < 360\n */\nexport function sanitizeDegrees(degrees: number) {\n  if (degrees < 0) {\n    return (degrees % 360) + 360;\n  } else if (degrees >= 360.0) {\n    return degrees % 360;\n  } else {\n    return degrees;\n  }\n}\n\n/**\n * Convert radians to degrees.\n */\nexport function toDegrees(radians: number) {\n  return (radians * 180.0) / Math.PI;\n}\n\n/**\n * Convert degrees to radians.\n */\nexport function toRadians(degrees: number) {\n  return (degrees / 180.0) * Math.PI;\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as math from \"../utils/math_utils\";\n\n/**\n * Utility methods for color science constants and color space\n *     conversions that aren't HCT or CAM16.\n */\n\n/**\n * Standard white point; white on a sunny day.\n */\nexport const WHITE_POINT_D65: number[] = [95.047, 100.0, 108.883];\n\n/**\n * @param argb ARGB representation of a color.\n * @return The alpha of the color, from 0 to 255.\n */\nexport const alphaFromInt = (argb: number) => {\n  return ((argb & 0xff000000) >> 24) >>> 0;\n};\n\n/**\n * @param argb ARGB representation of a color.\n * @return The red channel of the color, from 0 to 255.\n */\nexport const redFromInt = (argb: number) => {\n  return (argb & 0x00ff0000) >> 16;\n};\n\n/**\n * @param argb ARGB representation of a color.\n * @return The green channel of the color, from 0 to 255.\n */\nexport const greenFromInt = (argb: number) => {\n  return (argb & 0x0000ff00) >> 8;\n};\n\n/**\n * @param argb ARGB representation of a color.\n * @return The blue channel of the color, from 0 to 255.\n */\nexport const blueFromInt = (argb: number) => {\n  return argb & 0x000000ff;\n};\n\n/**\n * @param argb ARGB representation of a color.\n * @return L*, from L*a*b*, coordinate of the color.\n */\nexport const lstarFromInt = (argb: number) => {\n  const red = (argb & 0x00ff0000) >> 16;\n  const green = (argb & 0x0000ff00) >> 8;\n  const blue = argb & 0x000000ff;\n  const redL = linearized(red / 255.0) * 100.0;\n  const greenL = linearized(green / 255.0) * 100.0;\n  const blueL = linearized(blue / 255.0) * 100.0;\n  let y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n  y = y / 100.0;\n  const e = 216.0 / 24389.0;\n  let yIntermediate;\n  if (y <= e) {\n    yIntermediate = (24389.0 / 27.0) * y;\n    // If y < e, can skip consecutive steps of / 116 + 16 followed by * 116\n    // - 16.\n    return yIntermediate;\n  } else {\n    yIntermediate = Math.pow(y, 1.0 / 3.0);\n  }\n  return 116.0 * yIntermediate - 16.0;\n};\n\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport const hexFromInt = (argb: number) => {\n  const r = redFromInt(argb);\n  const g = greenFromInt(argb);\n  const b = blueFromInt(argb);\n  const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n\n  // Pad single-digit output values\n  for (const [i, part] of outParts.entries()) {\n    if (part.length === 1) {\n      outParts[i] = \"0\" + part;\n    }\n  }\n\n  return \"#\" + outParts.join(\"\");\n};\n\n/**\n * @param argb ARGB representation of a color.\n * @return Color's coordinates in the XYZ color space.\n */\nexport const xyzFromInt = (argb: number) => {\n  const red = (argb & 0x00ff0000) >> 16;\n  const green = (argb & 0x0000ff00) >> 8;\n  const blue = argb & 0x000000ff;\n  const redL = linearized(red / 255.0) * 100.0;\n  const greenL = linearized(green / 255.0) * 100.0;\n  const blueL = linearized(blue / 255.0) * 100.0;\n  const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n  const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n  const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n  return [x, y, z];\n};\n\n/**\n * @param rgb Array with 3 components between 0 and 255, representing red,\n *     green, and blue.\n * @return ARGB representation of the color.\n */\nexport const intFromRgb = (rgb: number[]) => {\n  return (\n    ((255 << 24) |\n      ((rgb[0] & 0x0ff) << 16) |\n      ((rgb[1] & 0x0ff) << 8) |\n      (rgb[2] & 0x0ff)) >>>\n    0\n  );\n};\n\n/**\n * @param argb ARGB representation of a color.\n * @return Color's coordinates in the L*a*b* color space.\n */\nexport const labFromInt = (argb: number) => {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n\n  const red = (argb & 0x00ff0000) >> 16;\n  const green = (argb & 0x0000ff00) >> 8;\n  const blue = argb & 0x000000ff;\n  const redL = linearized(red / 255.0) * 100.0;\n  const greenL = linearized(green / 255.0) * 100.0;\n  const blueL = linearized(blue / 255.0) * 100.0;\n  const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n  const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n  const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n\n  const yNormalized = y / WHITE_POINT_D65[1];\n  let fy;\n  if (yNormalized > e) {\n    fy = Math.pow(yNormalized, 1.0 / 3.0);\n  } else {\n    fy = (kappa * yNormalized + 16) / 116;\n  }\n\n  const xNormalized = x / WHITE_POINT_D65[0];\n  let fx;\n  if (xNormalized > e) {\n    fx = Math.pow(xNormalized, 1.0 / 3.0);\n  } else {\n    fx = (kappa * xNormalized + 16) / 116;\n  }\n\n  const zNormalized = z / WHITE_POINT_D65[2];\n  let fz;\n  if (zNormalized > e) {\n    fz = Math.pow(zNormalized, 1.0 / 3.0);\n  } else {\n    fz = (kappa * zNormalized + 16) / 116;\n  }\n\n  const l = 116.0 * fy - 16;\n  const a = 500.0 * (fx - fy);\n  const b = 200.0 * (fy - fz);\n  return [l, a, b];\n};\n\n/**\n * @return ARGB representation of color in the L*a*b* color space.\n */\nexport const intFromLab = (l: number, a: number, b: number) => {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  const ke = 8.0;\n\n  const fy = (l + 16.0) / 116.0;\n  const fx = a / 500.0 + fy;\n  const fz = fy - b / 200.0;\n  const fx3 = fx * fx * fx;\n  const xNormalized = fx3 > e ? fx3 : (116.0 * fx - 16.0) / kappa;\n  const yNormalized = l > ke ? fy * fy * fy : l / kappa;\n  const fz3 = fz * fz * fz;\n  const zNormalized = fz3 > e ? fz3 : (116.0 * fz - 16.0) / kappa;\n  const x = xNormalized * WHITE_POINT_D65[0];\n  const y = yNormalized * WHITE_POINT_D65[1];\n  const z = zNormalized * WHITE_POINT_D65[2];\n  return intFromXyz([x, y, z]);\n};\n\n/**\n * @return ARGB representation of color in the XYZ color space.\n */\nexport const intFromXyzComponents = (x: number, y: number, z: number) => {\n  x = x / 100.0;\n  y = y / 100.0;\n  z = z / 100.0;\n\n  const rL = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  const gL = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  const bL = x * 0.0557 + y * -0.204 + z * 1.057;\n  const r = delinearized(rL);\n  const g = delinearized(gL);\n  const b = delinearized(bL);\n\n  const rInt = Math.round(math.clamp(0, 255, r * 255));\n  const gInt = Math.round(math.clamp(0, 255, g * 255));\n  const bInt = Math.round(math.clamp(0, 255, b * 255));\n  return intFromRgb([rInt, gInt, bInt]);\n};\n\n/**\n * @return ARGB representation of color in the XYZ color space.\n */\nexport const intFromXyz = (xyz: number[]) => {\n  return intFromXyzComponents(xyz[0], xyz[1], xyz[2]);\n};\n\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport const intFromHex = (hex: string) => {\n  hex = hex.replace(\"#\", \"\");\n  const isThree = hex.length === 3;\n  const isSix = hex.length === 6;\n  const isEight = hex.length === 8;\n  if (!isThree && !isSix && !isEight) {\n    throw new Error(\"unexpected hex \" + hex);\n  }\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (isThree) {\n    r = parseIntHex(hex.slice(0, 1).repeat(2));\n    g = parseIntHex(hex.slice(1, 2).repeat(2));\n    b = parseIntHex(hex.slice(2, 3).repeat(2));\n  } else if (isSix) {\n    r = parseIntHex(hex.slice(0, 2));\n    g = parseIntHex(hex.slice(2, 4));\n    b = parseIntHex(hex.slice(4, 6));\n  } else if (isEight) {\n    r = parseIntHex(hex.slice(2, 4));\n    g = parseIntHex(hex.slice(4, 6));\n    b = parseIntHex(hex.slice(6, 8));\n  }\n\n  return (\n    ((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>> 0\n  );\n};\n\nfunction parseIntHex(value: string) {\n  // tslint:disable-next-line:ban\n  return parseInt(value, 16);\n}\n\n/**\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness matching L*\n */\nexport const intFromLstar = (lstar: number) => {\n  const fy = (lstar + 16.0) / 116.0;\n  const fz = fy;\n  const fx = fy;\n  const kappa = 24389 / 27;\n  const epsilon = 216 / 24389;\n  const cubeExceedEpsilon = fy * fy * fy > epsilon;\n  const lExceedsEpsilonKappa = lstar > 8.0;\n  const y = lExceedsEpsilonKappa ? fy * fy * fy : lstar / kappa;\n  const x = cubeExceedEpsilon ? fx * fx * fx : (116 * fx - 16) / kappa;\n  const z = cubeExceedEpsilon ? fz * fz * fz : (116 * fx - 16) / kappa;\n  const xyz = [\n    x * WHITE_POINT_D65[0],\n    y * WHITE_POINT_D65[1],\n    z * WHITE_POINT_D65[2],\n  ];\n  return intFromXyz(xyz);\n};\n\n/**\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n * L* measures perceptual luminance, a linear scale.\n * Y in XYZ measures relative luminance, a logarithmic scale.\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport const yFromLstar = (lstar: number) => {\n  const ke = 8.0;\n  if (lstar > ke) {\n    return Math.pow((lstar + 16.0) / 116.0, 3) * 100.0;\n  } else {\n    return (lstar / (24389.0 / 27.0)) * 100.0;\n  }\n};\n\n/**\n * @param rgb 0.0 <= rgb <= 1.0, represents R/G/B channel\n * @return color channel converted to linear RGB space\n */\nexport const linearized = (rgb: number) => {\n  if (rgb <= 0.04045) {\n    return rgb / 12.92;\n  } else {\n    return Math.pow((rgb + 0.055) / 1.055, 2.4);\n  }\n};\n\n/**\n * @param rgb 0.0 <= rgb <= 1.0, represents linear R/G/B channel\n * @return color channel converted to regular RGB space\n */\nexport const delinearized = (rgb: number) => {\n  if (rgb <= 0.0031308) {\n    return rgb * 12.92;\n  } else {\n    return 1.055 * Math.pow(rgb, 1.0 / 2.4) - 0.055;\n  }\n};\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from \"../utils/color_utils\";\nimport * as math from \"../utils/math_utils\";\n\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n  /** sRGB-like viewing conditions.  */\n  static DEFAULT = ViewingConditions.make();\n\n  /**\n   * Create ViewingConditions from a simple, physically relevant, set of\n   * parameters.\n   *\n   * @param whitePoint White point, measured in the XYZ color space.\n   *     default = D65, or sunny day afternoon\n   * @param adaptingLuminance The luminance of the adapting field. Informally,\n   *     how bright it is in the room where the color is viewed. Can be\n   *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n   *     or 200 lux.\n   * @param backgroundLstar The lightness of the area surrounding the color.\n   *     measured by L* in L*a*b*. default = 50.0\n   * @param surround A general description of the lighting surrounding the\n   *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n   *     dimly light room, like watching TV at home at night. 2.0 means there\n   *     is no difference between the lighting on the color and around it.\n   *     default = 2.0\n   * @param discountingIlluminant Whether the eye accounts for the tint of the\n   *     ambient lighting, such as knowing an apple is still red in green light.\n   *     default = false, the eye does not perform this process on\n   *       self-luminous objects like displays.\n   */\n  static make(\n    whitePoint = utils.WHITE_POINT_D65,\n    adaptingLuminance = ((200.0 / Math.PI) * utils.yFromLstar(50.0)) / 100.0,\n    backgroundLstar = 50.0,\n    surround = 2.0,\n    discountingIlluminant = false\n  ): ViewingConditions {\n    const xyz = whitePoint;\n    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n    const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n    const f = 0.8 + surround / 10.0;\n    const c =\n      f >= 0.9\n        ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0)\n        : math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n    let d = discountingIlluminant\n      ? 1.0\n      : f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n    d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n    const nc = f;\n    const rgbD = [\n      d * (100.0 / rW) + 1.0 - d,\n      d * (100.0 / gW) + 1.0 - d,\n      d * (100.0 / bW) + 1.0 - d,\n    ];\n    const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n    const k4 = k * k * k * k;\n    const k4F = 1.0 - k4;\n    const fl =\n      k4 * adaptingLuminance +\n      0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n    const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n    const z = 1.48 + Math.sqrt(n);\n    const nbb = 0.725 / Math.pow(n, 0.2);\n    const ncb = nbb;\n    const rgbAFactors = [\n      Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n    ];\n    const rgbA = [\n      (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n      (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n      (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n    ];\n    const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n    return new ViewingConditions(\n      n,\n      aw,\n      nbb,\n      ncb,\n      c,\n      nc,\n      rgbD,\n      fl,\n      Math.pow(fl, 0.25),\n      z\n    );\n  }\n\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  private constructor(\n    public n: number,\n    public aw: number,\n    public nbb: number,\n    public ncb: number,\n    public c: number,\n    public nc: number,\n    public rgbD: number[],\n    public fl: number,\n    public fLRoot: number,\n    public z: number\n  ) {}\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from \"../utils/color_utils\";\nimport * as math from \"../utils/math_utils\";\n\nimport { ViewingConditions } from \"./viewing_conditions\";\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class CAM16 {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  constructor(\n    readonly hue: number,\n    readonly chroma: number,\n    readonly j: number,\n    readonly q: number,\n    readonly m: number,\n    readonly s: number,\n    readonly jstar: number,\n    readonly astar: number,\n    readonly bstar: number\n  ) {}\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  distance(other: CAM16): number {\n    const dJ = this.jstar - other.jstar;\n    const dA = this.astar - other.astar;\n    const dB = this.bstar - other.bstar;\n    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n    const dE = 1.41 * Math.pow(dEPrime, 0.63);\n    return dE;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return CAM16 color, assuming the color was viewed in default viewing\n   *     conditions.\n   */\n  static fromInt(argb: number): CAM16 {\n    return CAM16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   * @return CAM16 color.\n   */\n  static fromIntInViewingConditions(\n    argb: number,\n    viewingConditions: ViewingConditions\n  ): CAM16 {\n    const red = (argb & 0x00ff0000) >> 16;\n    const green = (argb & 0x0000ff00) >> 8;\n    const blue = argb & 0x000000ff;\n    const redL = utils.linearized(red / 255.0) * 100.0;\n    const greenL = utils.linearized(green / 255.0) * 100.0;\n    const blueL = utils.linearized(blue / 255.0) * 100.0;\n    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n    const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n    const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n\n    const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n    const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n    const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = (atan2 * 180.0) / Math.PI;\n    const hue =\n      atanDegrees < 0\n        ? atanDegrees + 360.0\n        : atanDegrees >= 360\n        ? atanDegrees - 360.0\n        : atanDegrees;\n    const hueRadians = (hue * Math.PI) / 180.0;\n\n    const ac = p2 * viewingConditions.nbb;\n    const j =\n      100.0 *\n      Math.pow(\n        ac / viewingConditions.aw,\n        viewingConditions.c * viewingConditions.z\n      );\n    const q =\n      (4.0 / viewingConditions.c) *\n      Math.sqrt(j / 100.0) *\n      (viewingConditions.aw + 4.0) *\n      viewingConditions.fLRoot;\n    const huePrime = hue < 20.14 ? hue + 360 : hue;\n    const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n    const p1 =\n      (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n    const alpha =\n      Math.pow(t, 0.9) *\n      Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const c = alpha * Math.sqrt(j / 100.0);\n    const m = c * viewingConditions.fLRoot;\n    const s =\n      50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n\n    return new CAM16(hue, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   */\n  static fromJch(j: number, c: number, h: number): CAM16 {\n    return CAM16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromJchInViewingConditions(\n    j: number,\n    c: number,\n    h: number,\n    viewingConditions: ViewingConditions\n  ): CAM16 {\n    const q =\n      (4.0 / viewingConditions.c) *\n      Math.sqrt(j / 100.0) *\n      (viewingConditions.aw + 4.0) *\n      viewingConditions.fLRoot;\n    const m = c * viewingConditions.fLRoot;\n    const alpha = c / Math.sqrt(j / 100.0);\n    const s =\n      50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const hueRadians = (h * Math.PI) / 180.0;\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new CAM16(h, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   */\n  static fromUcs(jstar: number, astar: number, bstar: number): CAM16 {\n    return CAM16.fromUcsInViewingConditions(\n      jstar,\n      astar,\n      bstar,\n      ViewingConditions.DEFAULT\n    );\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromUcsInViewingConditions(\n    jstar: number,\n    astar: number,\n    bstar: number,\n    viewingConditions: ViewingConditions\n  ): CAM16 {\n    const a = astar;\n    const b = bstar;\n    const m = Math.sqrt(a * a + b * b);\n    const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n    const c = M / viewingConditions.fLRoot;\n    let h = Math.atan2(b, a) * (180.0 / Math.PI);\n    if (h < 0.0) {\n      h += 360.0;\n    }\n    const j = jstar / (1 - (jstar - 100) * 0.007);\n    return CAM16.fromJchInViewingConditions(j, c, h, viewingConditions);\n  }\n\n  /**\n   *  @return ARGB representation of color, assuming the color was viewed in\n   *     default viewing conditions, which are near-identical to the default\n   *     viewing conditions for sRGB.\n   */\n  viewedInSrgb(): number {\n    return this.viewed(ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param viewingConditions Information about the environment where the color\n   *     will be viewed.\n   * @return ARGB representation of color\n   */\n  viewed(viewingConditions: ViewingConditions): number {\n    const alpha =\n      this.chroma === 0.0 || this.j === 0.0\n        ? 0.0\n        : this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n      alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n      1.0 / 0.9\n    );\n    const hRad = (this.hue * Math.PI) / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac =\n      viewingConditions.aw *\n      Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n      eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const p2 = ac / viewingConditions.nbb;\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma =\n      (23.0 * (p2 + 0.305) * t) /\n      (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC =\n      math.signum(rA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC =\n      math.signum(gA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC =\n      math.signum(bA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    const argb = utils.intFromXyzComponents(x, y, z);\n    return argb;\n  }\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\nimport * as utils from \"../utils/color_utils\";\nimport * as math from \"../utils/math_utils\";\n\nimport { CAM16 } from \"./cam16\";\nimport { ViewingConditions } from \"./viewing_conditions\";\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class HCT {\n  /**\n   * @param hue 0 <= hue < 360; invalid values are corrected.\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n   *     returned may be lower than the requested chroma. Chroma has a different\n   *     maximum for any given hue and tone.\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\n   * @return HCT representation of a color in default viewing conditions.\n   */\n  static from(hue: number, chroma: number, tone: number) {\n    return new HCT(hue, chroma, tone);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return HCT representation of a color in default viewing conditions\n   */\n  static fromInt(argb: number) {\n    const cam = CAM16.fromInt(argb);\n    const tone = utils.lstarFromInt(argb);\n    return new HCT(cam.hue, cam.chroma, tone);\n  }\n\n  toInt(): number {\n    return getInt(this.internalHue, this.internalChroma, this.internalTone);\n  }\n\n  /**\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\n   * Ranges from 0 <= hue < 360.\n   */\n  get hue(): number {\n    return this.internalHue;\n  }\n\n  /**\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set hue(newHue: number) {\n    this.setInternalState(\n      getInt(\n        math.sanitizeDegrees(newHue),\n        this.internalChroma,\n        this.internalTone\n      )\n    );\n  }\n\n  get chroma(): number {\n    return this.internalChroma;\n  }\n\n  /**\n   * @param newChroma 0 <= newChroma < ?\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set chroma(newChroma: number) {\n    this.setInternalState(\n      getInt(this.internalHue, newChroma, this.internalTone)\n    );\n  }\n\n  /** Lightness. Ranges from 0 to 100. */\n  get tone(): number {\n    return this.internalTone;\n  }\n\n  /**\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set tone(newTone: number) {\n    this.setInternalState(\n      getInt(this.internalHue, this.internalChroma, newTone)\n    );\n  }\n\n  private constructor(\n    private internalHue: number,\n    private internalChroma: number,\n    private internalTone: number\n  ) {\n    this.setInternalState(this.toInt());\n  }\n\n  private setInternalState(argb: number) {\n    const cam = CAM16.fromInt(argb);\n    const tone = utils.lstarFromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = tone;\n  }\n}\n\n/**\n * When the delta between the floor & ceiling of a binary search for maximum\n * chroma at a hue and tone is less than this, the binary search terminates.\n */\nconst CHROMA_SEARCH_ENDPOINT: number = 0.4;\n\n/**\n * The maximum color distance, in CAM16-UCS, between a requested color and the\n * color returned.\n */\nconst DE_MAX: number = 1.0;\n\n/** The maximum difference between the requested L* and the L* returned. */\nconst DL_MAX: number = 0.2;\n\n/**\n * When the delta between the floor & ceiling of a binary search for J,\n * lightness in CAM16, is less than this, the binary search terminates.\n */\nconst LIGHTNESS_SEARCH_ENDPOINT: number = 0.01;\n\n/**\n * @param hue a number, in degrees, representing ex. red, orange, yellow, etc.\n *     Ranges from 0 <= hue < 360.\n * @param chroma Informally, colorfulness. Ranges from 0 to roughly 150.\n *    Like all perceptually accurate color systems, chroma has a different\n *    maximum for any given hue and tone, so the color returned may be lower\n *    than the requested chroma.\n * @param tone Lightness. Ranges from 0 to 100.\n * @return ARGB representation of a color in default viewing conditions\n */\nfunction getInt(hue: number, chroma: number, tone: number): number {\n  return getIntInViewingConditions(\n    math.sanitizeDegrees(hue),\n    chroma,\n    math.clamp(0.0, 100.0, tone),\n    ViewingConditions.DEFAULT\n  );\n}\n\n/**\n * @param hue CAM16 hue.\n * @param chroma CAM16 chroma.\n * @param tone L*a*b* lightness.\n * @param viewingConditions Information about the environment where the color\n *     was observed.\n */\nfunction getIntInViewingConditions(\n  hue: number,\n  chroma: number,\n  tone: number,\n  viewingConditions: ViewingConditions\n): number {\n  if (chroma < 1.0 || Math.round(tone) <= 0.0 || Math.round(tone) >= 100.0) {\n    return utils.intFromLstar(tone);\n  }\n\n  hue = math.sanitizeDegrees(hue);\n\n  let high = chroma;\n  let mid = chroma;\n  let low = 0.0;\n  let isFirstLoop = true;\n\n  let answer = null;\n  while (Math.abs(low - high) >= CHROMA_SEARCH_ENDPOINT) {\n    const possibleAnswer = findCamByJ(hue, mid, tone);\n\n    if (isFirstLoop) {\n      if (possibleAnswer != null) {\n        return possibleAnswer.viewed(viewingConditions);\n      } else {\n        isFirstLoop = false;\n        mid = low + (high - low) / 2.0;\n        continue;\n      }\n    }\n\n    if (possibleAnswer === null) {\n      high = mid;\n    } else {\n      answer = possibleAnswer;\n      low = mid;\n    }\n\n    mid = low + (high - low) / 2.0;\n  }\n\n  if (answer === null) {\n    return utils.intFromLstar(tone);\n  }\n\n  return answer.viewed(viewingConditions);\n}\n\n/**\n * @param hue CAM16 hue\n * @param chroma CAM16 chroma\n * @param tone L*a*b* lightness\n * @return CAM16 instance within error tolerance of the provided dimensions,\n *     or null.\n */\nfunction findCamByJ(hue: number, chroma: number, tone: number): CAM16 | null {\n  let low = 0.0;\n  let high = 100.0;\n  let mid = 0.0;\n  let bestdL = 1000.0;\n  let bestdE = 1000.0;\n\n  let bestCam = null;\n  while (Math.abs(low - high) > LIGHTNESS_SEARCH_ENDPOINT) {\n    mid = low + (high - low) / 2;\n\n    const camBeforeClip = CAM16.fromJch(mid, chroma, hue);\n    const clipped = camBeforeClip.viewedInSrgb();\n    const clippedLstar = utils.lstarFromInt(clipped);\n    const dL = Math.abs(tone - clippedLstar);\n\n    if (dL < DL_MAX) {\n      const camClipped = CAM16.fromInt(clipped);\n      const dE = camClipped.distance(\n        CAM16.fromJch(camClipped.j, camClipped.chroma, hue)\n      );\n      if (dE <= DE_MAX && dE <= bestdE) {\n        bestdL = dL;\n        bestdE = dE;\n        bestCam = camClipped;\n      }\n    }\n\n    if (bestdL === 0 && bestdE === 0) {\n      break;\n    }\n\n    if (clippedLstar < tone) {\n      low = mid;\n    } else {\n      high = mid;\n    }\n  }\n\n  return bestCam;\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HCT } from \"../hct/hct\";\n\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n  private readonly cache = new Map<number, number>();\n\n  /**\n   * @param argb ARGB representation of a color\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromInt(argb: number): TonalPalette {\n    const hct = HCT.fromInt(argb);\n    return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);\n  }\n\n  /**\n   * @param hue HCT hue\n   * @param chroma HCT chroma\n   * @return Tones matching hue and chroma.\n   */\n  static fromHueAndChroma(hue: number, chroma: number): TonalPalette {\n    return new TonalPalette(hue, chroma);\n  }\n\n  private constructor(\n    private readonly hue: number,\n    private readonly chroma: number\n  ) {}\n\n  /**\n   * @param tone HCT tone, measured from 0 to 100.\n   * @return ARGB representation of a color with that tone.\n   */\n  tone(tone: number): number {\n    let argb = this.cache.get(tone);\n    if (argb === undefined) {\n      argb = HCT.from(this.hue, this.chroma, tone).toInt();\n      this.cache.set(tone, argb);\n    }\n    return argb;\n  }\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HCT } from \"../hct/hct\";\n\nimport { TonalPalette } from \"./tonal_palette\";\n\n/**\n * An intermediate concept between the key color for a UI theme, and a full\n * color scheme. 5 sets of tones are generated, all except one use the same hue\n * as the key color, and all vary in chroma.\n */\nexport class CorePalette {\n  a1: TonalPalette;\n  a2: TonalPalette;\n  a3: TonalPalette;\n  n1: TonalPalette;\n  n2: TonalPalette;\n  error: TonalPalette;\n\n  /**\n   * @param argb ARGB representation of a color\n   */\n  static of(argb: number): CorePalette {\n    return new CorePalette(argb);\n  }\n\n  private constructor(argb: number) {\n    const hct = HCT.fromInt(argb);\n    const hue = hct.hue;\n    this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, hct.chroma));\n    this.a2 = TonalPalette.fromHueAndChroma(hue, 16);\n    this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);\n    this.n1 = TonalPalette.fromHueAndChroma(hue, 4);\n    this.n2 = TonalPalette.fromHueAndChroma(hue, 8);\n    this.error = TonalPalette.fromHueAndChroma(25, 84);\n  }\n}\n","import { CorePalette } from \"./material-color-utilities/typescript/palettes/core_palette\";\nimport { TonalPalette } from \"./material-color-utilities/typescript/palettes/tonal_palette\";\nimport { HCT } from \"./material-color-utilities/typescript/hct/hct\";\n\nexport const TONES = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 99, 100];\n\nexport function generateCorePalette(keyColor: number) {\n  const corePalette = CorePalette.of(keyColor);\n\n  const paletteValues = (palette: TonalPalette) =>\n    TONES.map((tone) => {\n      const argb = palette.tone(tone);\n      const hct = HCT.fromInt(argb);\n\n      return {\n        hex: \"#\" + argb.toString(16).substr(2),\n        h: hct.hue,\n        c: hct.chroma,\n        t: hct.tone,\n      };\n    });\n\n  return [\n    { name: \"a1\", palette: paletteValues(corePalette.a1) },\n    { name: \"a2\", palette: paletteValues(corePalette.a2) },\n    { name: \"a3\", palette: paletteValues(corePalette.a3) },\n    { name: \"n1\", palette: paletteValues(corePalette.n1) },\n    { name: \"n2\", palette: paletteValues(corePalette.n2) },\n    { name: \"error\", palette: paletteValues(corePalette.error) },\n  ] as const;\n}\n","import { createElement } from \"react\";\nimport { HCT } from \"./material-color-utilities/typescript/hct/hct\";\n\nimport \"./Swatch.css\";\n\nimport { colord, extend } from \"colord\";\nimport lchPlugin from \"colord/plugins/lch\";\nextend([lchPlugin]);\n\nexport interface ISwatchProps {\n  component?: \"td\" | \"th\";\n  hex: string;\n  h: number;\n  c: number;\n  t: number;\n  display?: \"hex\" | \"lch\" | \"hct\";\n  children?: React.ReactNode;\n}\n\nexport default function Swatch({\n  component = \"td\",\n  hex,\n  h,\n  c,\n  t,\n  display = \"hex\",\n  children,\n}: ISwatchProps) {\n  const contrastColor =\n    \"#\" +\n    HCT.from(h, c, t > 50 ? t - 80 : t + 80)\n      .toInt()\n      .toString(16)\n      .substr(2);\n\n  let render: React.ReactNode;\n  if (display === \"hex\") render = hex;\n  if (display === \"hct\")\n    render = (\n      <dl>\n        <dt>H</dt>\n        <dd>{h.toFixed(0)}</dd>\n        <dt>C</dt>\n        <dd>{c.toFixed(0)}</dd>\n        <dt>T</dt>\n        <dd>{t.toFixed(0)}</dd>\n      </dl>\n    );\n  if (display === \"lch\") {\n    const lch = colord(hex).toLch();\n    render = (\n      <dl>\n        <dt>L</dt>\n        <dd>{lch.l.toFixed(0)}</dd>\n        <dt>C</dt>\n        <dd>{lch.c.toFixed(0)}</dd>\n        <dt>H</dt>\n        <dd>{lch.h.toFixed(0)}</dd>\n      </dl>\n    );\n  }\n\n  return createElement(component, {\n    style: { backgroundColor: hex, color: contrastColor },\n    className: \"swatch\",\n    children: children ?? render,\n  });\n}\n","import { useState } from \"react\";\n\nimport \"./App.css\";\nimport { generateCorePalette, TONES } from \"./generate\";\nimport { HCT } from \"./material-color-utilities/typescript/hct/hct\";\nimport Swatch from \"./Swatch\";\n\nexport default function App() {\n  const [color, setColor] = useState(\"#3a6920\");\n  const colorAsNum = parseInt(color.replace(\"#\", \"\"), 16);\n  const colorAsHct = HCT.fromInt(colorAsNum);\n\n  const generated = generateCorePalette(colorAsNum);\n  console.log(generated);\n\n  const [display, setDisplay] = useState<\"hex\" | \"lch\" | \"hct\">(\"hex\");\n  const handleDisplayChange: React.ChangeEventHandler<HTMLInputElement> = (e) =>\n    setDisplay(e.target.id as typeof display);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            setColor((document.getElementById(\"color\") as any).value);\n          }}\n        >\n          <label htmlFor=\"color\">Key color:</label>\n          <input id=\"color\" type=\"color\" defaultValue={color} />\n          <input type=\"submit\" value=\"Generate\" />\n        </form>\n\n        <fieldset>\n          <legend>Display:</legend>\n          <input\n            type=\"radio\"\n            name=\"display\"\n            id=\"hex\"\n            checked={display === \"hex\"}\n            onChange={handleDisplayChange}\n          />\n          <label htmlFor=\"hex\">Hex</label>\n          <input\n            type=\"radio\"\n            name=\"display\"\n            id=\"lch\"\n            checked={display === \"lch\"}\n            onChange={handleDisplayChange}\n          />\n          <label htmlFor=\"lch\">LCH</label>\n          <input\n            type=\"radio\"\n            name=\"display\"\n            id=\"hct\"\n            checked={display === \"hct\"}\n            onChange={handleDisplayChange}\n          />\n          <label htmlFor=\"hct\">HCT</label>\n        </fieldset>\n      </header>\n\n      <table>\n        <tbody>\n          <tr>\n            <th>Key color</th>\n            {new Array(TONES.length)\n              .fill(0)\n              .map((_, i) =>\n                i === Math.round(colorAsHct.tone / 10) ? (\n                  <Swatch\n                    key={i}\n                    hex={color}\n                    h={colorAsHct.hue}\n                    c={colorAsHct.chroma}\n                    t={colorAsHct.tone}\n                    display={display}\n                  />\n                ) : (\n                  <td key={i} className=\"swatch\" />\n                )\n              )}\n          </tr>\n        </tbody>\n      </table>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Palette</th>\n            {TONES.map((tone) => (\n              <Swatch\n                key={tone}\n                component=\"th\"\n                hex={\"#\" + HCT.from(0, 0, tone).toInt().toString(16).substr(2)}\n                h={0}\n                c={0}\n                t={tone}\n              >\n                {tone}\n              </Swatch>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {generated.map(({ name, palette }) => (\n            <tr key={name}>\n              <th scope=\"row\">{name}</th>\n              {palette.map((tone) => (\n                <Swatch key={tone.t} {...tone} display={display} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}